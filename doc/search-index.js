var searchIndex = JSON.parse('{\
"kubernix":{"doc":"kubernix","i":[[3,"Config","kubernix","The global configuration",null,null],[3,"Logger","","The main logging faccade",null,null],[3,"Kubernix","","The main entry point for the application",null,null],[11,"start","","Start kubernix by consuming the provided configuration",0,[[["config",3]],["result",6]]],[11,"new_shell","","Spawn a new shell into the provided configuration …",0,[[["config",3]],["result",6]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"init","","",1,[[],["usize",15]]],[11,"deref","","",1,[[["usize",15]]]],[11,"deref_mut","","",1,[[["usize",15]]]],[11,"drop","","",1,[[["usize",15]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"init","","",2,[[],["usize",15]]],[11,"deref","","",2,[[["usize",15]]]],[11,"deref_mut","","",2,[[["usize",15]]]],[11,"drop","","",2,[[["usize",15]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[],["usize",15]]],[11,"deref","","",0,[[["usize",15]]]],[11,"deref_mut","","",0,[[["usize",15]]]],[11,"drop","","",0,[[["usize",15]]]],[11,"drop","","",0,[[]]],[11,"default","","",1,[[]]],[11,"serialize","","",1,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"enabled","","",2,[[["metadata",3]],["bool",15]]],[11,"log","","",2,[[["record",3]]]],[11,"flush","","",2,[[]]],[11,"into_app","","",1,[[],["app",3]]],[11,"into_app_for_update","","",1,[[],["app",3]]],[11,"augment_clap","","",1,[[["app",3]],["app",3]]],[11,"augment_clap_for_update","","",1,[[["app",3]],["app",3]]],[11,"from_arg_matches","","",1,[[["argmatches",3]]]],[11,"update_from_arg_matches","","",1,[[["argmatches",3]]]],[11,"log_level","","The logging level of the application",1,[[],["levelfilter",4]]],[11,"cidr","","The CIDR used for the cluster",1,[[],["ipv4network",3]]],[11,"nodes","","The number of nodes to be registered",1,[[],["u8",15]]],[11,"subcommand","","All available subcommands",1,[[],["option",4]]],[11,"root","","Path where all the runtime data is stored",1,[[],["pathbuf",3]]],[11,"overlay","","The Nix package overlay to be used",1,[[],["option",4]]],[11,"packages","","Additional dependencies to be added to the environment",1,[[],["vec",3]]],[11,"shell","","The shell executable to be used, defaults to $SHELL, …",1,[[],["option",4]]],[11,"container_runtime","","The container runtime to be used for the nodes, …",1,[[],["string",3]]],[11,"no_shell","","Do not spawn an interactive shell after bootstrap",1,[[],["bool",15]]],[11,"canonicalize_root","","Make the configs root path absolute",1,[[],["result",6]]],[11,"to_file","","Write the current configuration to the internal set root …",1,[[],["result",6]]],[11,"try_load_file","","Read the configuration from the internal set root path If …",1,[[],["result",6]]],[11,"shell_ok","","Return the set shell as result type",1,[[],[["result",6],["string",3]]]],[11,"multi_node","","Returns true if multi node support is enabled",1,[[],["bool",15]]],[11,"new","","Create a new logger",2,[[["levelfilter",4]],["box",3]]],[11,"error","","Log an error message",2,[[["str",15]]]]],"p":[[3,"Kubernix"],[3,"Config"],[3,"Logger"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);
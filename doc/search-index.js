var searchIndex = JSON.parse('{\
"kubernix":{"doc":"kubernix","t":[3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Config","Logger","Kubernix","start","new_shell","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","drop","default","serialize","deserialize","enabled","log","flush","into_app","into_app_for_update","augment_clap","augment_clap_for_update","from_arg_matches","update_from_arg_matches","log_level","cidr","nodes","subcommand","root","overlay","packages","shell","container_runtime","no_shell","canonicalize_root","to_file","try_load_file","shell_ok","multi_node","new","error"],"q":["kubernix","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The global configuration","The main logging faccade","The main entry point for the application","Start kubernix by consuming the provided configuration","Spawn a new shell into the provided configuration …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The logging level of the application","The CIDR used for the cluster","The number of nodes to be registered","All available subcommands","Path where all the runtime data is stored","The Nix package overlay to be used","Additional dependencies to be added to the environment","The shell executable to be used, defaults to $SHELL, …","The container runtime to be used for the nodes, …","Do not spawn an interactive shell after bootstrap","Make the configs root path absolute","Write the current configuration to the internal set root …","Read the configuration from the internal set root path If …","Return the set shell as result type","Returns true if multi node support is enabled","Create a new logger","Log an error message"],"i":[0,0,0,1,1,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3],"f":[null,null,null,[[["config",3]],["result",6]],[[["config",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["metadata",3]],["bool",15]],[[["record",3]]],[[]],[[],["app",3]],[[],["app",3]],[[["app",3]],["app",3]],[[["app",3]],["app",3]],[[["argmatches",3]]],[[["argmatches",3]]],[[],["levelfilter",4]],[[],["ipv4network",3]],[[],["u8",15]],[[],["option",4]],[[],["pathbuf",3]],[[],["option",4]],[[],["vec",3]],[[],["option",4]],[[],["string",3]],[[],["bool",15]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],[["string",3],["result",6]]],[[],["bool",15]],[[["levelfilter",4]],["box",3]],[[["str",15]]]],"p":[[3,"Kubernix"],[3,"Config"],[3,"Logger"]]}\
}');
initSearch(searchIndex);
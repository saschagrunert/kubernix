var searchIndex = JSON.parse('{\
"kubernix":{"doc":"kubernix","t":[3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Config","Kubernix","Logger","augment_clap","augment_clap_for_update","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","canonicalize_root","cidr","container_runtime","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","enabled","error","flush","from","from","from","from_arg_matches","init","init","init","into","into","into","into_app","into_app_for_update","log","log_level","multi_node","new","new_shell","no_shell","nodes","overlay","packages","root","serialize","shell","shell_ok","start","subcommand","to_file","try_from","try_from","try_from","try_into","try_into","try_into","try_load_file","type_id","type_id","type_id","update_from_arg_matches","vzip","vzip","vzip"],"q":["kubernix","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The global configuration","The main entry point for the application","The main logging faccade","","","","","","","","","Make the configs root path absolute","The CIDR used for the cluster","The container runtime to be used for the nodes, irrelevant …","","","","","","","","","","","","","","Log an error message","","","","","","","","","","","","","","","The logging level of the application","Returns true if multi node support is enabled","Create a new logger","Spawn a new shell into the provided configuration …","Do not spawn an interactive shell after bootstrap","The number of nodes to be registered","The Nix package overlay to be used","Additional dependencies to be added to the environment","Path where all the runtime data is stored","","The shell executable to be used, defaults to $SHELL, …","Return the set shell as result type","Start kubernix by consuming the provided configuration","All available subcommands","Write the current configuration to the internal set root …","","","","","","","Read the configuration from the internal set root path If …","","","","","","",""],"i":[0,0,0,1,1,2,3,1,2,3,1,1,1,1,1,2,3,1,2,3,1,1,2,3,3,1,2,2,2,2,3,1,1,2,3,1,2,3,1,1,1,2,1,1,2,3,1,1,1,1,1,1,1,1,3,1,1,2,3,1,2,3,1,1,2,3,1,1,2,3,1],"f":[null,null,null,[[["app",3]],["app",3]],[[["app",3]],["app",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",6]],[[],["ipv4network",3]],[[],["string",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["metadata",3]],["bool",15]],[[["str",15]]],[[]],[[]],[[]],[[]],[[["argmatches",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["app",3]],[[],["app",3]],[[["record",3]]],[[],["levelfilter",4]],[[],["bool",15]],[[["levelfilter",4]],["box",3]],[[["config",3]],["result",6]],[[],["bool",15]],[[],["u8",15]],[[],["option",4]],[[],["vec",3]],[[],["pathbuf",3]],[[],["result",4]],[[],["option",4]],[[],[["string",3],["result",6,["string"]]]],[[["config",3]],["result",6]],[[],["option",4]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",6]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["argmatches",3]]],[[]],[[]],[[]]],"p":[[3,"Config"],[3,"Logger"],[3,"Kubernix"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};